using LearningAbstractions
using LinearAlgebra
using Test

@testset "Testing transition components" begin

    function extract_extent(state)
        return [state[:,1] state[:,end-1]]
    end

    # 1D check
    image = [ -1.0 1.0 -1.0]
    state = [2.0 3.0 2.0]
    @test !LearningAbstractions.intersects(image, state)

    # 4D problem child
    image = [0.5231765964929588 0.6552188173496877 0.6552188173496877 0.5231765964929588 0.5231765964929588 0.6552188173496877 0.6552188173496877 0.5231765964929588 0.5231765964929588 0.6552188173496877 0.6552188173496877 0.5231765964929588 0.5231765964929588 0.6552188173496877 0.6552188173496877 0.5231765964929588;
             0.12872239988985795 0.12872239988985795 0.2342172697380045 0.2342172697380045 0.12872239988985795 0.12872239988985795 0.2342172697380045 0.2342172697380045 0.12872239988985795 0.12872239988985795 0.2342172697380045 0.2342172697380045 0.12872239988985795 0.12872239988985795 0.2342172697380045 0.2342172697380045;
            -0.6567443740735521 -0.6567443740735521 -0.6567443740735521 -0.6567443740735521 -0.282450979763166 -0.282450979763166 -0.282450979763166 -0.282450979763166 -0.6567443740735521 -0.6567443740735521 -0.6567443740735521 -0.6567443740735521 -0.282450979763166 -0.282450979763166 -0.282450979763166 -0.282450979763166;
            -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.5652355422597144 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744 -0.4263529044084744]

            
    # Take the distance of the image with itself
    res = LearningAbstractions.intersects(extract_extent(image), extract_extent(image))
    @test res

    # get the distance of the image with itself
    res = zeros(4,2)
    LearningAbstractions.dis_fcn!(res, image, image) 
    @test norm(res) == norm(image[:,1] - image[:,end-1])

    # Target state
    state = [0.5 0.75 0.75 0.5 0.5 0.75 0.75 0.5 0.5 0.75 0.75 0.5 0.5 0.75 0.75 0.5; 0.0 0.0 0.25 0.25 0.0 0.0 0.25 0.25 0.0 0.0 0.25 0.25 0.0 0.0 0.25 0.25; -0.43999999999999995 -0.43999999999999995 -0.43999999999999995 -0.43999999999999995 0.44000000000000017 0.44000000000000017 0.44000000000000017 0.44000000000000017 -0.43999999999999995 -0.43999999999999995 -0.43999999999999995 -0.43999999999999995 0.44000000000000017 0.44000000000000017 0.44000000000000017 0.44000000000000017; -0.75 -0.75 -0.75 -0.75 -0.75 -0.75 -0.75 -0.75 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5]
    @test LearningAbstractions.intersects(extract_extent(image), extract_extent(state)) && LearningAbstractions.intersects(extract_extent(state), extract_extent(image))

    res1 = zeros(4,2)
    LearningAbstractions.dis_fcn!(res1, state, image) 
    res2 = zeros(4,2)
    LearningAbstractions.dis_fcn!(res2, image, state) 
    @test res1 == res2

    # No RKHS interval
    interval = LearningAbstractions.transition_inverval(image, state, nothing)
    @test interval[2] == 1.0
    # TODO: Add tests for RKHS

    # Test the true transition probability function
    expected_result = [0, 0.61, 0.39, 0]
    indeces = [1, 2, 3, 4]

    pmin = [0, 0.5, 0.39, 0] 
    pmax = [0, 0.61, 0.41, 0]

    res = LearningAbstractions.true_transition_propabilities(pmin, pmax, indeces)

    @test res == expected_result
end
